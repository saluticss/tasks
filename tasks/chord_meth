import math

def chord_method(a, b):
    epsilon = 1e-6  # Точность
    x0 = a  # Начальное приближение x0
    x1 = b  # Начальное приближение x1
    f0 = f(x0)
    f1 = f(x1)

    while abs(f1) > epsilon:
        # Вычисляем новую аппроксимацию корня
        x2 = x1 - (f1 * (x1 - x0)) / (f1 - f0)

        # Обновляем значения для следующей итерации
        x0 = x1
        f0 = f1
        x1 = x2
        f1 = f(x1)

    return x1

def f(x):
    # Вычисляем значение функции для заданного x
    return 2 * math.sin(math.log(x ** 4)) + (1 / math.tanh(x))

a = 2  # Левый конец отрезка
b = 15  # Правый конец отрезка

# Применяем метод хорд для решения уравнения
solution = chord_method(a, b)

# Выводим приближенное решение
print("Приближенное решение:", solution)
